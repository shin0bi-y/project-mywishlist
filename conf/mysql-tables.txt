
use mywishlist;

show tables;

drop table users;
drop table list;
drop table item;

/*------*/

create table users(
    email VARCHAR(255) Primary Key,
    name VARCHAR(255),
    password VARCHAR(255)
);

insert into users (email, name, password) values ('jean@hotmail.com', 'Jean', '123456');

select * from users;

/*------*/

create table list(
    idList VARCHAR(255) PRIMARY KEY,
    listName VARCHAR(255),
    emailAuthor VARCHAR(255),
    description VARCHAR(1024),
    isPublic tinyint(1),
    creationDate DATE,
    limitDate DATE,
    FOREIGN KEY fk_emailAuthor (emailAuthor) references users(email)
);

delete from list;
insert into list (listName, emailAuthor, description, creationDate, limitDate) values ('pour yanis', 'jean@hotmail.com', 'cool', now(), now());
select * from list;

/*------*/

create table item(
    idItem int PRIMARY KEY AUTO_INCREMENT,
    idList VARCHAR(255),
    itemName VARCHAR(255),
    description VARCHAR(1024),
    photoPath VARCHAR(255),
    emailUser VARCHAR(255),
    cout int(11) NOT NULL,
    FOREIGN KEY fk_idList (idList) references list(idList),
    FOREIGN KEY fk_emailUser (emailUser) references users(email)
);

insert into item (idList, itemName, description, photoPath, emailUser) values (1, 'ThinkPad', 'Best Laptop', '/images/thinkpad.jpg', 'jean@hotmail.com');

select * from item;

/*------*/

create table message (
    idMessage int PRIMARY KEY AUTO_INCREMENT,
    idList VARCHAR(255),
    emailUser VARCHAR(255),
    nameAuthor varchar(255) DEFAULT NULL,
    message varchar(1023),
    date DATE,
    FOREIGN KEY fk_emailUserMessage (emailUser) references users(email),
    FOREIGN KEY fk_idListMessage (idList) references list(idList)
);


/*------*/

create table cagnotte (
    idItem int PRIMARY KEY,
    prix double,
    emailCreator VARCHAR(255),
    date DATE,
    FOREIGN KEY fk_emailCreator (emailCreator) references users(email),
    FOREIGN KEY fk_idItemCagnotte (idItem) references item(idItem)
);

/*------*/

create table participantCagnotte(
    idItem int PRIMARY KEY,
    emailParticipant VARCHAR(255),
    somme double,
    FOREIGN KEY fk_emailParticipant (emailParticipant) references users(email),
    FOREIGN KEY fk_idItemParticipantCagnotte (idItem) references item(idItem)
);
